
from tkinter import*

#CARD START
from functools import total_ordering
import random
from tkinter import PhotoImage


@total_ordering
class Card(object):
  """一张牌"""

  def __init__(self, suite, face):
      self._suite = suite
      self._face = face

  @property
  def face(self):
      return self._face

  @property
  def suite(self):
      return self._suite

  def __str__(self):
      if self._face == 14:
          face_str = 'A'
      elif self._face == 11:
          face_str = 'J'
      elif self._face == 12:
          face_str = 'Q'
      elif self._face == 13:
          face_str = 'K'
      else:
          face_str = str(self._face)
      return '%s%s' % (self._suite, face_str)

  def __repr__(self):
      return self.__str__()

  def __eq__(self, other):
      return self.__str__() == other.__str__()

  def __lt__(self, other):
      return self.__str__() < other.__str__()


class Poker(object):
  """一副牌"""

  def __init__(self):
      self._cards = [Card(suite, face)
                     for suite in '♠♥♣♦'
                     for face in range(2, 15)]
      self._current = 0

  @property
  def cards(self):
      return self._cards

  def shuffle(self):
      """洗牌(随机乱序)"""
      self._current = 0
      random.shuffle(self._cards)

  @property
  def next(self):
      """发牌"""
      card = self._cards[self._current]
      self._current += 1
      return card

  @property
  def has_next(self):
      """还有没有牌"""
      return self._current < len(self._cards)


class Player(object):
  """玩家"""

  def __init__(self, name):
      self._name = name
      self._cards_on_hand = []

  @property
  def name(self):
      return self._name

  @property
  def cards_on_hand(self):
      return self._cards_on_hand

  def get(self, card):
      """摸牌"""
      self._cards_on_hand.append(card)

  def arrange(self, card_key):
      """玩家整理手上的牌"""
      self._cards_on_hand.sort(key=card_key)

  """回傳手牌中有的花色   e.g：['♠', '♣', '♥', '♦']"""

  def suites_on_hand(self):
      suites = []
      for card in self._cards_on_hand:
          if card.suite not in suites:
              suites.append(card.suite)
      return suites

  """列出某種花色的手牌"""

  def find_suite(self, suite):
      suites = []

      if suite == -1:
          return suites

      for card in self._cards_on_hand:
          if card.suite == suite:
              suites.append(card)

      return suites

  def __str__(self):
      return self._name

  def __repr__(self):
      return self.__str__()


# 排序规则-先根据花色再根据点数排序
def get_key(card):
  return (card.suite, card.face)



def okay():
  p = Poker()
  p.shuffle()
  players = [Player('东邪'), Player('西毒'), Player('南帝'), Player('北丐')]
  for _ in range(13):
      for player in players:
          player.get(p.next)

  for player in players:
      if player.name == "南帝":
          player.arrange(get_key)
          south = player.cards_on_hand
  return(south)




def start():
  btn.destroy()
  n = Label(root,text='北丐',anchor=N)
  n.config(width=50)
  n.pack()
  w = Label(root,text='西毒',anchor=W)
  w.config(width=50)
  e = Label(root,text='東邪',anchor=E)
  e.config(width=50)
  me = Label(root,text='me',anchor=S)
  me.config(width=50)
  n.pack()
  w.pack()
  e.pack()
  me.pack()
  p=Label(root,text=okay(),anchor=CENTER)
  p.config(width=60)
  p.pack()
  for i in range(len(okay())):
      if okay()[i] == "♠2":
          photo2 = PhotoImage(file='2-spades.png')
          labelphoto2 = Label(image=photo2)
          labelphoto2.image = photo2
          labelphoto2.pack()
      elif okay()[i] == "♠3":
          photo3 = PhotoImage(file='3-spades.png')
          labelphoto3 = Label(image=photo3)
          labelphoto3.image = photo3
          labelphoto3.pack()

      elif okay()[i] == "♠4":
          photo4 = PhotoImage(file='4-spades.png')
          labelphoto4 = Label(image=photo4)
          labelphoto4.image = photo4
          labelphoto4.pack()

      elif okay()[i] == "♠5":
          photo5 = PhotoImage(file='5-spades.png')
          labelphoto5 = Label(image=photo5)
          labelphoto5.image = photo5
          labelphoto5.pack()
      elif okay()[i] == "♠6":
          photo6 = PhotoImage(file='6-spades.png')
          labelphoto6 = Label(image=photo6)
          labelphoto6.image = photo6
          labelphoto6.pack()

      elif okay()[i] == "♠7":
          photo7 = PhotoImage(file='7-spades.png')
          labelphoto7 = Label(image=photo7)
          labelphoto7.image = photo7
          labelphoto7.pack()

      elif okay()[i] == "♠8":
          photo8 = PhotoImage(file='8-spades.png')
          labelphoto8 = Label(image=photo8)
          labelphoto8.image = photo8
          labelphoto8.pack()

      elif okay()[i] == "♠9":
          photo9 = PhotoImage(file='9-spades.png')
          labelphoto9 = Label(image=photo9)
          labelphoto9.image = photo9
          labelphoto9.pack()

      elif okay()[i] == "♠10":
          photo10 = PhotoImage(file='10-spades.png')
          labelphoto10 = Label(image=photo10)
          labelphoto10.image = photo10
          labelphoto10.pack()

      elif okay()[i] == "♠J":
          photo11 = PhotoImage(file='11-spades.png')
          labelphoto11 = Label(image=photo11)
          labelphoto11.image = photo11
          labelphoto11.pack()

      elif okay()[i] == "♠Q":
          photo12 = PhotoImage(file='12-spades.png')
          labelphoto12 = Label(image=photo12)
          labelphoto12.image = photo12
          labelphoto12.pack()

      elif okay()[i] == "♠K":
          photo13 = PhotoImage(file='13-spades.png')
          labelphoto13 = Label(image=photo13)
          labelphoto13.image = photo13
          labelphoto13.pack()

      elif okay()[i] == "♠A":
          photo14 = PhotoImage(file='14-spades.png')
          labelphoto14 = Label(image=photo14)
          labelphoto14.image = photo14
          labelphoto14.pack()

#END

#button

root = Tk()  #常駐主視窗
root.title("Bridge_Card")
root.geometry("400x200")
btn = Button(text="START",command=start)
btn.pack()
root.mainloop()
